# This is a basic workflow to help you get started with Actions

name: Build Server

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-server

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      EMAIL_ENABLED: 
        type: string
        required: true
      SMTP_HOSTNAME: 
        type: string
      SMTP_USER:
        type: string
      SMTP_FROM_EMAIL:
        type: string
      SMTP_PASSWORD:
        type: string
      ADMIN_EMAIL:
        type: string
      EMAIL_SYNC_ERROR_FREQUENCY:
        type: string
      EMAIL_SYNC_SEND_FREQUENCY:
        type: string
      EMAIL_SYNC_ERROR_SUBJECT:
        type: string
      EMAIL_SYNC_SUBJECT:
        type: string
      DEFAULT_APPLICATION_ENVIRONMENT:
        type: string
      



# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: Build with Maven
        run: mvn --settings server/mvn_settings/settings.xml --batch-mode --update-snapshots -f server/pom.xml -Drepo.login=${{ secrets.IDIR_AS_EMAIL }} -Drepo.password=${{ secrets.IDIR_PASSWORD }} -DskipTests package

      - name: input properties
        run:
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.email.notifications.enabled.ind}/${{ inputs.EMAIL_ENABLED }}/'
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.smtp.host.name}/${{ inputs.SMTP_HOSTNAME }}/' 
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.smtp.credentials.user}/${{ inputs.SMTP_USER}}/' 
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.smtp.credentials.password}/${{ inputs.SMTP_PASSWORD }}/' 
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.email.from.address}/${{ inputs.SMTP_FROM_EMAIL }}/' 
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.email.admin.address}/${{ inputs.ADMIN_EMAIL }}/'
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.email.sync.send.error.frequency}/${{ inputs.EMAIL_SYNC_ERROR_FREQUENCY }}/'
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.email.sync.send.frequency}/${{ inputs.EMAIL_SYNC_SEND_FREQUENCY }}/'
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.email.sync.error.subject}/${{ inputs.EMAIL_SYNC_ERROR_SUBJECT }}/'
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.email.sync.subject}/${{ inputs.EMAIL_SYNC_SUBJECT }}/'
          find server -type f -name 'application.properties' | xargs sed -i 's/#{wfone.default.application.environment}/${{ inputs.DEFAULT_APPLICATION_ENVIRONMENT }}/'
        
      - name: Copy files to neccessary folders
        run: mkdir staging && cp server/wfnews-api-rest-endpoints/target/*.war staging
      
      - uses: actions/upload-artifact@v3
        with:
         name: Package
         path: staging
         
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: staging
          key: ${{ runner.os }}-maven-${{ hashFiles('**war.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
         
  docker:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: Package
          path: .
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
     
